import "package:cardano_dart_types/cardano_dart_types.dart";
import "package:cardano_flutter_sdk/cardano_flutter_sdk.dart";
import "package:fast_base58/fast_base58.dart";
import "package:pinenacl/api.dart";
import "package:test/test.dart";

import "test_utils/fixtures.dart";

void main() async {
  group("reported failures", () {
    test(
      "from ryan - intersect",
      () async {
        const mnemonic =
            "lazy license chair theme milk extra bread convince sick maze leaf chief access nature topple again resource scale feel silent rug quote try scissors";

        const txCbor =
            "";

        final tx = CardanoTransaction.deserializeFromHex(txCbor);
        final wallet = await WalletFactory.fromMnemonic(NetworkId.testnet, mnemonic.split(" "));

        final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: {});

        const expected =
            "17af545b5b729c2fe9d008c55093ff5a18d19dbb04fdc245fb9b7293b4fe51f4772eaf1b63e81792d3209e9f90587ef16be3f4495b8a9152b552411afffd8a00";

        expect(signature.vkeyWitnesses.first.signature.hexEncode(), expected);
      },
      timeout: const Timeout(Duration(hours: 6000)),
    );
  });

  const mnemonic =
      "chief fiber betray curve tissue output feature jungle adapt smile brown crane accuse gospel plate unlock pull arrow hard february tape soccer patrol fetch";

  final wallet = await WalletFactory.fromMnemonic(NetworkId.testnet, mnemonic.split(" "));

  group("sign staking key operations", () {
    test("required signers includes staking credentials", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              241,
              44,
              26,
              81,
              104,
              132,
              215,
              182,
              86,
              121,
              92,
              50,
              160,
              64,
              92,
              57,
              187,
              193,
              196,
              164,
              169,
              203,
              205,
              44,
              45,
              230,
              115,
              207,
              205,
              228,
              69,
              159,
              6,
              219,
              245,
              44,
              144,
              215,
              48,
              161,
              78,
              49,
              238,
              67,
              236,
              138,
              141,
              221,
              200,
              0,
              119,
              110,
              36,
              69,
              195,
              246,
              110,
              113,
              210,
              167,
              68,
              254,
              140,
              15,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              36,
              83,
              252,
              32,
              52,
              150,
              96,
              36,
              53,
              165,
              115,
              53,
              55,
              104,
              105,
              128,
              87,
              244,
              127,
              97,
              173,
              22,
              194,
              216,
              174,
              166,
              146,
              17,
              203,
              88,
              113,
              239,
              77,
              153,
              239,
              131,
              228,
              23,
              47,
              133,
              98,
              139,
              254,
              154,
              72,
              191,
              123,
              15,
              46,
              112,
              91,
              186,
              93,
              238,
              38,
              206,
              212,
              46,
              76,
              156,
              205,
              240,
              46,
              1,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          requiredSigners: RequiredSigners(
            signersBytes: [
              [
                39,
                45,
                11,
                135,
                12,
                123,
                149,
                97,
                212,
                211,
                222,
                228,
                107,
                141,
                66,
                42,
                138,
                142,
                197,
                85,
                197,
                20,
                226,
                177,
                95,
                7,
                41,
                52,
              ].toUint8List(),
              [
                39,
                45,
                11,
                135,
                251,
                123,
                149,
                97,
                212,
                211,
                222,
                228,
                107,
                141,
                66,
                42,
                138,
                142,
                197,
                85,
                197,
                20,
                226,
                177,
                95,
                7,
                41,
                52,
              ].toUint8List(),
            ],
            cborTags: [],
          ),
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("native script pub key includes receive address creds", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              0,
              34,
              13,
              105,
              70,
              6,
              26,
              40,
              227,
              84,
              254,
              59,
              129,
              86,
              68,
              28,
              36,
              169,
              190,
              233,
              62,
              75,
              141,
              237,
              198,
              162,
              226,
              161,
              190,
              39,
              107,
              22,
              231,
              137,
              28,
              7,
              146,
              231,
              60,
              145,
              202,
              77,
              14,
              76,
              200,
              190,
              124,
              226,
              244,
              187,
              175,
              186,
              175,
              222,
              28,
              191,
              194,
              230,
              49,
              158,
              159,
              223,
              183,
              14,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
        ),
        witnessSet: witnessSet(
          nativeScripts: [
            NativeScript.any(scripts: [NativeScript.pubKey(blob: wallet.firstAddress.credentialsBytes)]),
          ],
        ),
        isValidDi: true,
        auxiliaryData: null,
      );

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: {});

      expect(signature, expected);
    });

    test("native script pub key includes staking creds", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              90,
              134,
              245,
              228,
              208,
              198,
              209,
              27,
              226,
              162,
              220,
              198,
              41,
              59,
              235,
              24,
              178,
              94,
              56,
              55,
              131,
              120,
              136,
              29,
              153,
              193,
              164,
              13,
              70,
              49,
              246,
              53,
              16,
              35,
              190,
              131,
              138,
              158,
              58,
              250,
              152,
              136,
              30,
              47,
              248,
              80,
              179,
              184,
              20,
              63,
              58,
              93,
              216,
              97,
              113,
              155,
              103,
              197,
              229,
              143,
              95,
              132,
              7,
              6,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
        ),
        witnessSet: witnessSet(
          nativeScripts: [
            NativeScript.pubKey(blob: wallet.firstAddress.stakeCredentialsBytes!),
          ],
        ),
        isValidDi: true,
        auxiliaryData: null,
      );

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: {});

      expect(signature, expected);
    });

    test("required signers includes full staking address (incl network and type)", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              119,
              57,
              103,
              106,
              177,
              104,
              222,
              249,
              59,
              0,
              100,
              248,
              23,
              31,
              115,
              133,
              163,
              121,
              156,
              110,
              180,
              164,
              151,
              62,
              172,
              28,
              5,
              118,
              45,
              166,
              195,
              76,
              246,
              214,
              241,
              140,
              105,
              234,
              8,
              177,
              203,
              51,
              155,
              55,
              18,
              218,
              194,
              125,
              40,
              57,
              61,
              233,
              135,
              242,
              122,
              189,
              43,
              111,
              144,
              68,
              176,
              228,
              191,
              12,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              36,
              153,
              48,
              86,
              16,
              83,
              86,
              18,
              36,
              145,
              30,
              89,
              116,
              118,
              203,
              97,
              90,
              172,
              169,
              224,
              117,
              246,
              54,
              242,
              16,
              139,
              55,
              80,
              188,
              129,
              79,
              24,
              65,
              241,
              163,
              198,
              117,
              77,
              85,
              113,
              253,
              111,
              90,
              192,
              247,
              175,
              154,
              138,
              109,
              104,
              122,
              38,
              5,
              189,
              88,
              59,
              221,
              158,
              129,
              35,
              61,
              108,
              139,
              12,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: RequiredSigners(
            signersBytes: [
              "e0272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
            ],
            cborTags: [],
          ),
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("register staking key - different stake credentials", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              3,
              64,
              74,
              190,
              194,
              152,
              110,
              47,
              200,
              203,
              112,
              64,
              242,
              43,
              182,
              105,
              198,
              82,
              141,
              62,
              159,
              4,
              210,
              202,
              22,
              140,
              55,
              208,
              118,
              38,
              80,
              9,
              190,
              9,
              249,
              145,
              101,
              149,
              70,
              169,
              132,
              179,
              245,
              4,
              134,
              133,
              192,
              4,
              20,
              229,
              111,
              195,
              119,
              230,
              107,
              133,
              150,
              211,
              161,
              126,
              174,
              176,
              4,
              3,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: Certificates(
            certificates: [
              Certificate.stakeRegistrationLegacy(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  [312, 2, 123, 2].toUint8List(),
                ),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("register staking key - using walet stake credentials", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              39,
              91,
              245,
              72,
              196,
              205,
              184,
              152,
              142,
              118,
              64,
              173,
              73,
              83,
              87,
              19,
              179,
              101,
              54,
              226,
              27,
              113,
              229,
              5,
              182,
              216,
              24,
              247,
              208,
              2,
              208,
              228,
              166,
              66,
              62,
              166,
              144,
              253,
              217,
              32,
              13,
              217,
              248,
              109,
              202,
              114,
              148,
              167,
              212,
              245,
              47,
              124,
              119,
              154,
              145,
              63,
              69,
              162,
              197,
              177,
              199,
              105,
              169,
              2,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              141,
              225,
              208,
              250,
              120,
              157,
              128,
              205,
              209,
              64,
              25,
              230,
              158,
              202,
              100,
              224,
              142,
              225,
              143,
              93,
              9,
              160,
              248,
              145,
              158,
              222,
              112,
              191,
              144,
              100,
              66,
              66,
              40,
              139,
              98,
              26,
              138,
              46,
              144,
              42,
              153,
              179,
              121,
              66,
              227,
              244,
              177,
              169,
              186,
              250,
              29,
              110,
              105,
              242,
              201,
              224,
              63,
              171,
              75,
              176,
              249,
              117,
              48,
              13,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: Certificates(
            certificates: [
              Certificate.stakeRegistrationLegacy(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("deregister staking key", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              99,
              192,
              51,
              236,
              43,
              100,
              218,
              199,
              209,
              183,
              46,
              190,
              121,
              51,
              12,
              98,
              198,
              201,
              6,
              242,
              0,
              183,
              18,
              110,
              152,
              180,
              216,
              51,
              9,
              124,
              200,
              136,
              253,
              235,
              75,
              232,
              29,
              4,
              136,
              21,
              227,
              220,
              62,
              201,
              5,
              0,
              101,
              90,
              145,
              189,
              212,
              224,
              250,
              62,
              161,
              130,
              101,
              165,
              151,
              143,
              243,
              76,
              49,
              13,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              196,
              115,
              59,
              179,
              157,
              134,
              173,
              97,
              160,
              169,
              74,
              40,
              180,
              140,
              100,
              252,
              114,
              146,
              50,
              155,
              18,
              57,
              213,
              223,
              81,
              106,
              7,
              239,
              68,
              165,
              232,
              66,
              127,
              156,
              217,
              58,
              174,
              86,
              97,
              148,
              178,
              202,
              126,
              219,
              48,
              45,
              53,
              51,
              199,
              74,
              174,
              210,
              134,
              49,
              60,
              80,
              173,
              44,
              181,
              144,
              243,
              41,
              37,
              6,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: Certificates(
            certificates: [
              Certificate.stakeDeRegistrationLegacy(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("delegate to pool", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              226,
              195,
              134,
              25,
              182,
              42,
              74,
              203,
              47,
              166,
              217,
              83,
              64,
              175,
              8,
              171,
              81,
              140,
              71,
              212,
              50,
              88,
              134,
              217,
              248,
              125,
              199,
              54,
              47,
              93,
              77,
              182,
              81,
              185,
              169,
              251,
              131,
              95,
              33,
              93,
              194,
              92,
              148,
              156,
              235,
              150,
              85,
              253,
              104,
              94,
              230,
              67,
              241,
              68,
              69,
              193,
              41,
              84,
              88,
              164,
              134,
              96,
              159,
              2,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              140,
              208,
              239,
              46,
              89,
              31,
              183,
              98,
              77,
              105,
              196,
              8,
              151,
              173,
              151,
              188,
              232,
              208,
              204,
              31,
              1,
              61,
              157,
              239,
              218,
              73,
              17,
              16,
              206,
              211,
              137,
              139,
              195,
              145,
              230,
              62,
              160,
              249,
              7,
              118,
              222,
              221,
              30,
              61,
              213,
              128,
              149,
              149,
              0,
              9,
              7,
              58,
              228,
              154,
              248,
              250,
              28,
              214,
              64,
              116,
              78,
              240,
              188,
              5,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: Certificates(
            certificates: [
              Certificate.stakeDelegation(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
                stakePoolId: StakePoolId([21, 2, 2, 1].toUint8List()),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("withdraw rewards", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              41,
              225,
              9,
              125,
              117,
              50,
              55,
              73,
              123,
              145,
              45,
              206,
              232,
              236,
              139,
              163,
              125,
              132,
              236,
              73,
              226,
              166,
              162,
              132,
              73,
              30,
              57,
              183,
              166,
              66,
              96,
              96,
              226,
              5,
              39,
              22,
              236,
              236,
              2,
              1,
              116,
              105,
              98,
              248,
              188,
              174,
              182,
              42,
              157,
              176,
              196,
              171,
              45,
              145,
              213,
              144,
              185,
              42,
              59,
              86,
              114,
              146,
              217,
              4,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              34,
              56,
              10,
              236,
              90,
              94,
              116,
              114,
              196,
              234,
              168,
              130,
              186,
              55,
              129,
              21,
              126,
              253,
              17,
              95,
              240,
              28,
              53,
              205,
              108,
              56,
              132,
              146,
              219,
              245,
              202,
              140,
              183,
              241,
              225,
              37,
              185,
              125,
              151,
              207,
              11,
              175,
              160,
              57,
              175,
              20,
              167,
              207,
              173,
              248,
              130,
              171,
              179,
              181,
              26,
              137,
              197,
              22,
              93,
              172,
              146,
              116,
              183,
              0,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: [
            Withdraw("stake_test1uqnj6zu8ldae2cw5600wg6udgg4g4rk92hz3fc43turjjdqg8a07k", BigInt.from(24132135)),
          ],
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("register staking key and delegate to pool", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              74,
              83,
              208,
              58,
              83,
              107,
              9,
              128,
              207,
              41,
              156,
              53,
              242,
              220,
              244,
              148,
              147,
              117,
              173,
              191,
              127,
              201,
              9,
              207,
              109,
              187,
              230,
              162,
              65,
              46,
              140,
              200,
              95,
              151,
              97,
              2,
              133,
              241,
              151,
              164,
              156,
              43,
              4,
              96,
              137,
              58,
              16,
              50,
              14,
              39,
              222,
              96,
              188,
              69,
              188,
              65,
              29,
              92,
              139,
              166,
              197,
              26,
              162,
              11,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              217,
              170,
              150,
              61,
              131,
              247,
              117,
              60,
              70,
              55,
              87,
              130,
              87,
              97,
              22,
              230,
              83,
              78,
              248,
              33,
              49,
              100,
              28,
              252,
              49,
              232,
              125,
              112,
              219,
              112,
              153,
              88,
              188,
              66,
              170,
              211,
              229,
              168,
              228,
              71,
              168,
              32,
              206,
              224,
              40,
              244,
              68,
              173,
              152,
              94,
              205,
              50,
              229,
              4,
              15,
              178,
              71,
              95,
              88,
              150,
              91,
              226,
              12,
              6,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: Certificates(
            certificates: [
              Certificate.stakeRegistrationLegacy(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
              ),
              Certificate.stakeDelegation(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
                stakePoolId: StakePoolId([21, 2, 2, 1].toUint8List()),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });
  });

  group("sign send tx", () {
    test("additional payment signer", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              197,
              127,
              158,
              18,
              142,
              155,
              126,
              2,
              66,
              174,
              8,
              198,
              46,
              199,
              254,
              222,
              84,
              159,
              50,
              134,
              151,
              101,
              60,
              163,
              25,
              180,
              53,
              91,
              23,
              6,
              187,
              155,
              34,
              83,
              104,
              17,
              5,
              160,
              117,
              98,
              98,
              184,
              246,
              26,
              186,
              183,
              117,
              246,
              87,
              106,
              247,
              21,
              101,
              182,
              207,
              109,
              183,
              222,
              240,
              106,
              226,
              132,
              172,
              1,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              68,
              115,
              65,
              21,
              57,
              220,
              222,
              255,
              48,
              20,
              145,
              152,
              195,
              27,
              125,
              76,
              208,
              252,
              34,
              199,
              115,
              107,
              121,
              190,
              126,
              191,
              217,
              172,
              70,
              31,
              83,
              88,
            ].toUint8List(),
            signature: [
              85,
              66,
              25,
              163,
              54,
              179,
              26,
              9,
              115,
              244,
              35,
              106,
              131,
              126,
              20,
              70,
              52,
              239,
              210,
              217,
              212,
              67,
              237,
              249,
              66,
              255,
              146,
              233,
              137,
              121,
              23,
              228,
              160,
              23,
              35,
              146,
              96,
              23,
              194,
              195,
              22,
              221,
              54,
              142,
              38,
              122,
              172,
              2,
              57,
              158,
              73,
              144,
              141,
              199,
              89,
              20,
              132,
              29,
              117,
              180,
              91,
              56,
              224,
              3,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              142,
              134,
              174,
              232,
              184,
              131,
              124,
              107,
              90,
              72,
              120,
              19,
              155,
              198,
              16,
              47,
              34,
              13,
              101,
              70,
              225,
              64,
              3,
              74,
              152,
              236,
              226,
              252,
              51,
              214,
              199,
              208,
            ].toUint8List(),
            signature: [
              95,
              183,
              197,
              57,
              97,
              196,
              107,
              136,
              40,
              125,
              89,
              178,
              86,
              178,
              152,
              98,
              215,
              95,
              108,
              169,
              11,
              172,
              105,
              175,
              182,
              6,
              219,
              41,
              44,
              128,
              162,
              102,
              22,
              200,
              93,
              199,
              132,
              158,
              201,
              99,
              21,
              99,
              97,
              52,
              255,
              160,
              175,
              160,
              14,
              74,
              58,
              218,
              238,
              238,
              156,
              1,
              41,
              148,
              194,
              77,
              44,
              82,
              73,
              0,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: RequiredSigners(
            signersBytes: [
              "1b56cb9152b51846efe7953b177fc5aebebc808e6a967b7729c806fa".hexDecode(),
              "9d08d9cad94118d685fc50bdd0ce7dfb5463196dbe6b05812df01912".hexDecode(),
            ],
            cborTags: [],
          ),
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });
    test("first receive address", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              0,
              34,
              13,
              105,
              70,
              6,
              26,
              40,
              227,
              84,
              254,
              59,
              129,
              86,
              68,
              28,
              36,
              169,
              190,
              233,
              62,
              75,
              141,
              237,
              198,
              162,
              226,
              161,
              190,
              39,
              107,
              22,
              231,
              137,
              28,
              7,
              146,
              231,
              60,
              145,
              202,
              77,
              14,
              76,
              200,
              190,
              124,
              226,
              244,
              187,
              175,
              186,
              175,
              222,
              28,
              191,
              194,
              230,
              49,
              158,
              159,
              223,
              183,
              14,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("first receive address as enterprise", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              0,
              34,
              13,
              105,
              70,
              6,
              26,
              40,
              227,
              84,
              254,
              59,
              129,
              86,
              68,
              28,
              36,
              169,
              190,
              233,
              62,
              75,
              141,
              237,
              198,
              162,
              226,
              161,
              190,
              39,
              107,
              22,
              231,
              137,
              28,
              7,
              146,
              231,
              60,
              145,
              202,
              77,
              14,
              76,
              200,
              190,
              124,
              226,
              244,
              187,
              175,
              186,
              175,
              222,
              28,
              191,
              194,
              230,
              49,
              158,
              159,
              223,
              183,
              14,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {"addr_test1vrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqgchphdxm"};

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("first change address", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              76,
              20,
              51,
              34,
              144,
              87,
              169,
              42,
              96,
              68,
              163,
              246,
              126,
              248,
              161,
              75,
              24,
              210,
              89,
              49,
              13,
              55,
              185,
              104,
              108,
              123,
              16,
              8,
              16,
              215,
              251,
              125,
            ].toUint8List(),
            signature: [
              157,
              179,
              2,
              241,
              170,
              166,
              253,
              0,
              3,
              166,
              204,
              180,
              48,
              200,
              143,
              84,
              118,
              254,
              71,
              35,
              2,
              229,
              121,
              167,
              211,
              122,
              212,
              74,
              240,
              55,
              48,
              244,
              188,
              123,
              159,
              81,
              178,
              112,
              81,
              134,
              221,
              235,
              190,
              219,
              171,
              28,
              117,
              118,
              172,
              64,
              41,
              149,
              117,
              228,
              211,
              123,
              103,
              87,
              255,
              153,
              62,
              73,
              220,
              4,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          currentTreasuryValue: null,
          donation: null,
          proposalProcedures: null,
          votingProcedures: null,
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qqcyp2gry5xe8wlhqjlwr7gydz6x5n9px387np4n8g4axte8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qf9p9tq",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("first receive and change address", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              0,
              34,
              13,
              105,
              70,
              6,
              26,
              40,
              227,
              84,
              254,
              59,
              129,
              86,
              68,
              28,
              36,
              169,
              190,
              233,
              62,
              75,
              141,
              237,
              198,
              162,
              226,
              161,
              190,
              39,
              107,
              22,
              231,
              137,
              28,
              7,
              146,
              231,
              60,
              145,
              202,
              77,
              14,
              76,
              200,
              190,
              124,
              226,
              244,
              187,
              175,
              186,
              175,
              222,
              28,
              191,
              194,
              230,
              49,
              158,
              159,
              223,
              183,
              14,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              76,
              20,
              51,
              34,
              144,
              87,
              169,
              42,
              96,
              68,
              163,
              246,
              126,
              248,
              161,
              75,
              24,
              210,
              89,
              49,
              13,
              55,
              185,
              104,
              108,
              123,
              16,
              8,
              16,
              215,
              251,
              125,
            ].toUint8List(),
            signature: [
              157,
              179,
              2,
              241,
              170,
              166,
              253,
              0,
              3,
              166,
              204,
              180,
              48,
              200,
              143,
              84,
              118,
              254,
              71,
              35,
              2,
              229,
              121,
              167,
              211,
              122,
              212,
              74,
              240,
              55,
              48,
              244,
              188,
              123,
              159,
              81,
              178,
              112,
              81,
              134,
              221,
              235,
              190,
              219,
              171,
              28,
              117,
              118,
              172,
              64,
              41,
              149,
              117,
              228,
              211,
              123,
              103,
              87,
              255,
              153,
              62,
              73,
              220,
              4,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          networkId: null,
          referenceInputs: null,
          collateralReturn: null,
          requiredSigners: null,
          totalCollateral: null,
          scriptDataHash: null,
          collateral: null,
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
          ttl: null,
          validityStartInterval: null,
          metadataHash: null,
          mint: null,
          certs: null,
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
        "addr_test1qqcyp2gry5xe8wlhqjlwr7gydz6x5n9px387np4n8g4axte8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qf9p9tq",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("mixed receive and change address", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              195,
              160,
              202,
              81,
              86,
              66,
              112,
              208,
              103,
              231,
              222,
              238,
              64,
              196,
              96,
              3,
              62,
              212,
              33,
              113,
              199,
              58,
              246,
              27,
              11,
              32,
              234,
              52,
              108,
              28,
              31,
              146,
            ].toUint8List(),
            signature: [
              172,
              87,
              27,
              254,
              73,
              219,
              144,
              230,
              147,
              221,
              190,
              60,
              8,
              124,
              210,
              14,
              53,
              8,
              224,
              52,
              73,
              58,
              179,
              237,
              165,
              129,
              148,
              51,
              0,
              107,
              50,
              11,
              153,
              95,
              172,
              99,
              14,
              27,
              41,
              14,
              144,
              89,
              121,
              137,
              40,
              136,
              26,
              138,
              71,
              66,
              103,
              181,
              195,
              1,
              224,
              132,
              152,
              30,
              142,
              225,
              50,
              199,
              244,
              4,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              36,
              156,
              49,
              61,
              30,
              121,
              4,
              46,
              149,
              97,
              50,
              55,
              1,
              216,
              83,
              12,
              24,
              93,
              255,
              11,
              23,
              221,
              117,
              9,
              43,
              65,
              72,
              217,
              34,
              243,
              85,
              203,
            ].toUint8List(),
            signature: [
              47,
              12,
              232,
              24,
              181,
              223,
              100,
              204,
              253,
              162,
              229,
              168,
              88,
              230,
              84,
              242,
              225,
              47,
              246,
              246,
              94,
              44,
              148,
              143,
              116,
              34,
              6,
              170,
              82,
              84,
              221,
              108,
              10,
              26,
              229,
              50,
              71,
              103,
              153,
              139,
              185,
              163,
              210,
              210,
              43,
              1,
              146,
              134,
              234,
              130,
              31,
              115,
              66,
              176,
              110,
              219,
              152,
              246,
              159,
              34,
              189,
              23,
              180,
              3,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              145,
              114,
              225,
              78,
              76,
              79,
              18,
              3,
              103,
              236,
              213,
              221,
              37,
              127,
              78,
              128,
              203,
              238,
              69,
              54,
              105,
              186,
              55,
              57,
              240,
              119,
              15,
              196,
              35,
              254,
              188,
              167,
            ].toUint8List(),
            signature: [
              227,
              178,
              32,
              66,
              24,
              176,
              192,
              137,
              21,
              12,
              238,
              175,
              192,
              181,
              151,
              36,
              228,
              141,
              36,
              213,
              232,
              218,
              109,
              243,
              114,
              20,
              112,
              102,
              179,
              223,
              239,
              169,
              34,
              108,
              209,
              249,
              32,
              82,
              14,
              110,
              196,
              148,
              96,
              188,
              10,
              62,
              255,
              138,
              69,
              90,
              98,
              196,
              95,
              172,
              55,
              73,
              73,
              168,
              57,
              20,
              70,
              121,
              32,
              8,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          inputs: const CardanoTransactionInputs(data: [], cborTags: []),
          outputs: [],
          fee: BigInt.one,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qqqky867munv2nxg0qyjrv4w3lyqekrukd6p49rwcxql2xf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qe5x4su",
        "addr_test1qq54j5r58k7z4u9hlxqv54kq675s0q98rn3439pnuv60lhf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6q6traa6",
        "addr_test1qzx6wpeqpx3u39s37knzeakzhf572j9cmm62ccqdrjrxyhp8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhemktt",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("with legacy byron addresses", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              152,
              136,
              169,
              146,
              28,
              174,
              216,
              177,
              17,
              33,
              82,
              8,
              188,
              227,
              193,
              134,
              60,
              22,
              163,
              69,
              38,
              38,
              110,
              67,
              234,
              84,
              224,
              191,
              153,
              5,
              40,
              40,
              153,
              184,
              43,
              245,
              170,
              242,
              60,
              126,
              198,
              249,
              231,
              248,
              21,
              12,
              215,
              154,
              110,
              197,
              50,
              247,
              89,
              12,
              206,
              35,
              93,
              65,
              68,
              38,
              220,
              32,
              38,
              8,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          networkId: NetworkId.mainnet,
          referenceInputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1135,
              ),
            ],
            cborTags: [],
          ),
          scriptDataHash: [32, 224, 214, 232, 163, 36, 208, 19, 172, 139].toUint8List(),
          collateral: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 125,
              ),
            ],
            cborTags: [],
          ),
          inputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1235,
              ),
            ],
            cborTags: [],
          ),
          outputs: [
            CardanoTransactionOutput.postAlonzo(
              lengthType: CborLengthType.definite,
              addressBytes: Base58Decode("Ae2tdPwUPEZMprtyWNF9W49RN2BkWyHMaXtrBRyiVcZHoBe3XgNdfXZBpYS").toUint8List(),
              value: Value.v1(
                lovelace: BigInt.parse("1000000000"),
                mA: [
                  MultiAsset(
                    policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
                    assets: [
                      Asset(hexName: "477564696d52656c6178303739", value: BigInt.from(2)),
                    ],
                  ),
                ],
              ),
              outDatum: OutputDatum.inline(
                PlutusData.list(
                  [
                    PlutusData.definiteBytes([23, 1, 23, 234, 2].toUint8List(), []),
                    PlutusData.bigInt(BigInt.one),
                  ],
                  [],
                  CborLengthType.definite,
                ),
              ),
              scriptRef: null,
            ),
            CardanoTransactionOutput.legacy(
              lengthType: CborLengthType.definite,
              addressBytes: Base58Decode(
                "DdzFFzCqrhtD8nA6rLDxJ5D3kdFg2iWoQcK7szhC2PLb5RCzzn5mmDWnPQU8TBDL3Xy2hCbZ9WU6utrHiMuKad5kn5VdXWTTTZEpAmyz",
              ).toUint8List(),
              value: Value.v0(lovelace: BigInt.parse("3000000000")),
              outDatumHash: null,
            ),
            CardanoTransactionOutput.postAlonzo(
              lengthType: CborLengthType.indefinite,
              addressBytes: Base58Decode(
                "DdzFFzCqrhtD8nA6rLDxJ5D3kdFg2iWoQcK7szhC2PLb5RCzzn5mmDWnPQU8TBDL3Xy2hCbZ9WU6utrHiMuKad5kn5VdXWTTTZEpAmyz",
              ).toUint8List(),
              value: Value.v1(lovelace: BigInt.parse("3000000000"), mA: const []),
              outDatum: null,
              scriptRef: null,
            ),
          ],
          fee: BigInt.one,
          ttl: BigInt.from(12513),
          validityStartInterval: BigInt.from(215),
          metadataHash: [5, 324, 2, 1, 432].toUint8List(),
          mint: [
            MultiAsset(
              policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
              assets: [
                Asset(hexName: "477564696d52656c6178303739", value: BigInt.one),
              ],
            ),
          ],
          certs: Certificates(
            certificates: [
              Certificate.stakeDelegation(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  [312, 2, 123, 2].toUint8List(),
                ),
                stakePoolId: StakePoolId([21, 2, 2, 1].toUint8List()),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("with complex body - don't overwrite body metadata hash", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              228,
              199,
              132,
              69,
              244,
              133,
              118,
              217,
              144,
              209,
              138,
              65,
              241,
              20,
              113,
              87,
              87,
              98,
              227,
              239,
              117,
              213,
              97,
              141,
              0,
              214,
              231,
              246,
              102,
              222,
              66,
              61,
              167,
              26,
              77,
              71,
              115,
              22,
              249,
              162,
              212,
              225,
              11,
              217,
              11,
              191,
              101,
              57,
              24,
              253,
              127,
              16,
              143,
              68,
              139,
              223,
              14,
              217,
              64,
              21,
              212,
              126,
              122,
              4,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: false,
        body: CardanoTransactionBody.create(
          networkId: NetworkId.mainnet,
          referenceInputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1135,
              ),
            ],
            cborTags: [],
          ),
          collateralReturn: CardanoTransactionOutput.postAlonzo(
            lengthType: CborLengthType.definite,
            addressBytes:
                "addr_test1qq54j5r58k7z4u9hlxqv54kq675s0q98rn3439pnuv60lhf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6q6traa6"
                    .bech32Decode(),
            value: Value.v1(
              lovelace: BigInt.parse("1200000000"),
              mA: [
                MultiAsset(
                  policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
                  assets: [
                    Asset(hexName: "477564610d52656c6178303739", value: BigInt.from(242)),
                  ],
                ),
              ],
            ),
            outDatum: OutputDatum.hash([148, 163, 137, 45, 123, 33, 166, 152].toUint8List()),
            scriptRef: [79, 243, 153, 32, 224, 214, 232, 163, 36, 208, 19, 172, 139, 84, 194, 158].toUint8List(),
          ),
          requiredSigners: RequiredSigners(
            signersBytes: [
              [166, 55, 212, 232, 101, 200, 161, 44, 71, 151, 244, 176].toUint8List(),
              [
                39,
                45,
                11,
                135,
                251,
                123,
                149,
                97,
                212,
                211,
                222,
                228,
                107,
                141,
                66,
                42,
                138,
                142,
                197,
                85,
                197,
                20,
                226,
                177,
                95,
                7,
                1,
                52,
              ].toUint8List(),
            ],
            cborTags: [],
          ),
          totalCollateral: BigInt.from(245232542),
          scriptDataHash: [32, 224, 214, 232, 163, 36, 208, 19, 172, 139].toUint8List(),
          collateral: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 125,
              ),
            ],
            cborTags: [],
          ),
          inputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1235,
              ),
            ],
            cborTags: [],
          ),
          outputs: [
            CardanoTransactionOutput.postAlonzo(
              lengthType: CborLengthType.auto,
              addressBytes:
                  "addr_test1qq54j5r58k7z4u9hlxqv54kq675s0q98rn3439pnuv60lhf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6q6traa6"
                      .bech32Decode(),
              value: Value.v1(
                lovelace: BigInt.parse("1000000000"),
                mA: [
                  MultiAsset(
                    policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
                    assets: [
                      Asset(hexName: "477564696d52656c6178303739", value: BigInt.from(2)),
                    ],
                  ),
                ],
              ),
              outDatum: OutputDatum.inline(
                PlutusData.list(
                  [
                    PlutusData.definiteBytes([23, 1, 23, 234, 2].toUint8List(), []),
                    PlutusData.bigInt(BigInt.one),
                  ],
                  [],
                  CborLengthType.definite,
                ),
              ),
              scriptRef: null,
            ),
          ],
          fee: BigInt.one,
          ttl: BigInt.from(12513),
          validityStartInterval: BigInt.from(215),
          metadataHash: [5, 324, 2, 1, 432].toUint8List(),
          mint: [
            MultiAsset(
              policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
              assets: [
                Asset(hexName: "477564696d52656c6178303739", value: BigInt.one),
              ],
            ),
          ],
          certs: Certificates(
            certificates: [
              Certificate.stakeDelegation(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  [312, 2, 123, 2].toUint8List(),
                ),
                stakePoolId: StakePoolId([21, 2, 2, 1].toUint8List()),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });

    test("with complex body - override metadata hash", () async {
      final expected = witnessSet(
        vkeyWitnesses: [
          WitnessVKey(
            vkey: [
              172,
              177,
              192,
              12,
              191,
              220,
              181,
              215,
              153,
              21,
              210,
              124,
              202,
              11,
              133,
              102,
              100,
              109,
              30,
              11,
              134,
              230,
              28,
              103,
              161,
              188,
              210,
              137,
              230,
              226,
              169,
              56,
            ].toUint8List(),
            signature: [
              70,
              252,
              191,
              217,
              114,
              58,
              64,
              230,
              249,
              141,
              230,
              81,
              33,
              159,
              255,
              74,
              179,
              26,
              228,
              253,
              158,
              112,
              116,
              159,
              136,
              147,
              73,
              239,
              202,
              193,
              188,
              144,
              31,
              211,
              161,
              31,
              190,
              76,
              184,
              218,
              113,
              35,
              159,
              54,
              238,
              124,
              79,
              148,
              15,
              70,
              203,
              12,
              58,
              220,
              246,
              116,
              37,
              225,
              34,
              0,
              34,
              5,
              144,
              7,
            ].toUint8List(),
          ),
          WitnessVKey(
            vkey: [
              166,
              55,
              212,
              232,
              101,
              200,
              161,
              44,
              71,
              151,
              244,
              176,
              169,
              199,
              154,
              51,
              163,
              60,
              59,
              155,
              88,
              175,
              178,
              12,
              196,
              134,
              89,
              31,
              211,
              78,
              21,
              10,
            ].toUint8List(),
            signature: [
              123,
              207,
              102,
              208,
              23,
              149,
              249,
              209,
              173,
              182,
              10,
              92,
              133,
              224,
              61,
              67,
              127,
              211,
              46,
              183,
              165,
              84,
              174,
              192,
              154,
              22,
              50,
              31,
              14,
              157,
              162,
              101,
              87,
              249,
              77,
              236,
              131,
              136,
              13,
              186,
              95,
              124,
              113,
              213,
              225,
              216,
              241,
              124,
              252,
              64,
              224,
              241,
              140,
              231,
              6,
              195,
              106,
              131,
              82,
              101,
              65,
              150,
              244,
              6,
            ].toUint8List(),
          ),
        ],
      );

      final tx = CardanoTransaction(
        overrideBodyMetadataHash: true,
        body: CardanoTransactionBody.create(
          networkId: NetworkId.mainnet,
          referenceInputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1135,
              ),
            ],
            cborTags: [],
          ),
          collateralReturn: CardanoTransactionOutput.postAlonzo(
            lengthType: CborLengthType.definite,
            addressBytes:
                "addr_test1qq54j5r58k7z4u9hlxqv54kq675s0q98rn3439pnuv60lhf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6q6traa6"
                    .bech32Decode(),
            value: Value.v1(
              lovelace: BigInt.parse("1200000000"),
              mA: [
                MultiAsset(
                  policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
                  assets: [
                    Asset(hexName: "477564610d52656c6178303739", value: BigInt.from(242)),
                  ],
                ),
              ],
            ),
            outDatum: OutputDatum.hash([148, 163, 137, 45, 123, 33, 166, 152].toUint8List()),
            scriptRef: [79, 243, 153, 32, 224, 214, 232, 163, 36, 208, 19, 172, 139, 84, 194, 158].toUint8List(),
          ),
          requiredSigners: RequiredSigners(
            signersBytes: [
              [166, 55, 212, 232, 101, 200, 161, 44, 71, 151, 244, 176].toUint8List(),
            ],
            cborTags: [],
          ),
          totalCollateral: BigInt.from(245232542),
          scriptDataHash: [32, 224, 214, 232, 163, 36, 208, 19, 172, 139].toUint8List(),
          collateral: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 125,
              ),
            ],
            cborTags: [],
          ),
          inputs: const CardanoTransactionInputs(
            data: [
              CardanoTransactionInput(
                transactionHash: "f6737ac511665332453e542d918ee3b9acb0b9e96738639fb15eea3939fa80c8",
                index: 1235,
              ),
            ],
            cborTags: [],
          ),
          outputs: [
            CardanoTransactionOutput.postAlonzo(
              lengthType: CborLengthType.definite,
              addressBytes:
                  "addr_test1qq54j5r58k7z4u9hlxqv54kq675s0q98rn3439pnuv60lhf8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6q6traa6"
                      .bech32Decode(),
              value: Value.v1(
                lovelace: BigInt.parse("1000000000"),
                mA: [
                  MultiAsset(
                    policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
                    assets: [
                      Asset(hexName: "477564696d52656c6178303739", value: BigInt.from(2)),
                    ],
                  ),
                ],
              ),
              outDatum: OutputDatum.inline(
                PlutusData.list(
                  [
                    PlutusData.indefiniteBytes(
                      [
                        [23, 1],
                        [23, 234, 2],
                      ],
                      [11, 22],
                    ),
                    PlutusData.bigInt(BigInt.one),
                  ],
                  [],
                  CborLengthType.indefinite,
                ),
              ),
              scriptRef: null,
            ),
          ],
          fee: BigInt.one,
          ttl: BigInt.from(12513),
          validityStartInterval: BigInt.from(215),
          metadataHash: [5, 324, 2, 1, 432].toUint8List(),
          mint: [
            MultiAsset(
              policyId: "96913a1b287987a5f69ddfbd6f5483a95a93dad6d4900c4202161ce7",
              assets: [
                Asset(hexName: "477564696d52656c6178303739", value: BigInt.one),
              ],
            ),
          ],
          certs: Certificates(
            certificates: [
              Certificate.stakeDelegation(
                stakeCredential: Credential(
                  CredType.ADDR_KEY_HASH,
                  "272d0b87fb7b9561d4d3dee46b8d422a8a8ec555c514e2b15f072934".hexDecode(),
                ),
                stakePoolId: StakePoolId([21, 2, 2, 1].toUint8List()),
              ),
            ],
            cborTags: [],
            lengthType: CborLengthType.definite,
          ),
          withdrawals: null,
        ),
        witnessSet: emptyWitnessSet,
        isValidDi: true,
        auxiliaryData: null,
      );

      final witnessBech32Addresses = {
        "addr_test1qrjn5f9jl0hw7w7r4hz4vgsf9nyvzuh66cwzx8gntrjlqge8959c07mmj4saf577u34c6s32328v24w9zn3tzhc89y6qhkdw7e",
      };

      final signature = await wallet.signTransaction(tx: tx, witnessBech32Addresses: witnessBech32Addresses);

      expect(signature, expected);
    });
  });
}
